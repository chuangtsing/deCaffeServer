// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vatest_proto.proto

#ifndef PROTOBUF_vatest_5fproto_2eproto__INCLUDED
#define PROTOBUF_vatest_5fproto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace vatest_proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_vatest_5fproto_2eproto();
void protobuf_AssignDesc_vatest_5fproto_2eproto();
void protobuf_ShutdownFile_vatest_5fproto_2eproto();

class ServerMessage;
class ClientMessage;

enum ServerMessage_Type {
  ServerMessage_Type_CONNECT = 0,
  ServerMessage_Type_VIDEO = 1,
  ServerMessage_Type_RECEIVED = 2,
  ServerMessage_Type_BATCH = 3,
  ServerMessage_Type_DISCONNECT = 4
};
bool ServerMessage_Type_IsValid(int value);
const ServerMessage_Type ServerMessage_Type_Type_MIN = ServerMessage_Type_CONNECT;
const ServerMessage_Type ServerMessage_Type_Type_MAX = ServerMessage_Type_DISCONNECT;
const int ServerMessage_Type_Type_ARRAYSIZE = ServerMessage_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServerMessage_Type_descriptor();
inline const ::std::string& ServerMessage_Type_Name(ServerMessage_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServerMessage_Type_descriptor(), value);
}
inline bool ServerMessage_Type_Parse(
    const ::std::string& name, ServerMessage_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServerMessage_Type>(
    ServerMessage_Type_descriptor(), name, value);
}
enum ClientMessage_Type {
  ClientMessage_Type_CONNECT = 0,
  ClientMessage_Type_VIDEO = 1,
  ClientMessage_Type_FRAME = 2,
  ClientMessage_Type_BATCH = 3,
  ClientMessage_Type_UPLINK_TEST = 4,
  ClientMessage_Type_DISCONNECT = 5
};
bool ClientMessage_Type_IsValid(int value);
const ClientMessage_Type ClientMessage_Type_Type_MIN = ClientMessage_Type_CONNECT;
const ClientMessage_Type ClientMessage_Type_Type_MAX = ClientMessage_Type_DISCONNECT;
const int ClientMessage_Type_Type_ARRAYSIZE = ClientMessage_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* ClientMessage_Type_descriptor();
inline const ::std::string& ClientMessage_Type_Name(ClientMessage_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    ClientMessage_Type_descriptor(), value);
}
inline bool ClientMessage_Type_Parse(
    const ::std::string& name, ClientMessage_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ClientMessage_Type>(
    ClientMessage_Type_descriptor(), name, value);
}
// ===================================================================

class ServerMessage : public ::google::protobuf::Message {
 public:
  ServerMessage();
  virtual ~ServerMessage();

  ServerMessage(const ServerMessage& from);

  inline ServerMessage& operator=(const ServerMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerMessage& default_instance();

  void Swap(ServerMessage* other);

  // implements Message ----------------------------------------------

  ServerMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerMessage& from);
  void MergeFrom(const ServerMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ServerMessage_Type Type;
  static const Type CONNECT = ServerMessage_Type_CONNECT;
  static const Type VIDEO = ServerMessage_Type_VIDEO;
  static const Type RECEIVED = ServerMessage_Type_RECEIVED;
  static const Type BATCH = ServerMessage_Type_BATCH;
  static const Type DISCONNECT = ServerMessage_Type_DISCONNECT;
  static inline bool Type_IsValid(int value) {
    return ServerMessage_Type_IsValid(value);
  }
  static const Type Type_MIN =
    ServerMessage_Type_Type_MIN;
  static const Type Type_MAX =
    ServerMessage_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    ServerMessage_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return ServerMessage_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return ServerMessage_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return ServerMessage_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .vatest_proto.ServerMessage.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::vatest_proto::ServerMessage_Type type() const;
  inline void set_type(::vatest_proto::ServerMessage_Type value);

  // optional string path = 2;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 2;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // repeated uint32 tags = 3;
  inline int tags_size() const;
  inline void clear_tags();
  static const int kTagsFieldNumber = 3;
  inline ::google::protobuf::uint32 tags(int index) const;
  inline void set_tags(int index, ::google::protobuf::uint32 value);
  inline void add_tags(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      tags() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_tags();

  // optional uint32 batch = 4;
  inline bool has_batch() const;
  inline void clear_batch();
  static const int kBatchFieldNumber = 4;
  inline ::google::protobuf::uint32 batch() const;
  inline void set_batch(::google::protobuf::uint32 value);

  // repeated uint64 size = 5;
  inline int size_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 5;
  inline ::google::protobuf::uint64 size(int index) const;
  inline void set_size(int index, ::google::protobuf::uint64 value);
  inline void add_size(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      size() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_size();

  // @@protoc_insertion_point(class_scope:vatest_proto.ServerMessage)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_path();
  inline void clear_has_path();
  inline void set_has_batch();
  inline void clear_has_batch();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* path_;
  int type_;
  ::google::protobuf::uint32 batch_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > tags_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_vatest_5fproto_2eproto();
  friend void protobuf_AssignDesc_vatest_5fproto_2eproto();
  friend void protobuf_ShutdownFile_vatest_5fproto_2eproto();

  void InitAsDefaultInstance();
  static ServerMessage* default_instance_;
};
// -------------------------------------------------------------------

class ClientMessage : public ::google::protobuf::Message {
 public:
  ClientMessage();
  virtual ~ClientMessage();

  ClientMessage(const ClientMessage& from);

  inline ClientMessage& operator=(const ClientMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientMessage& default_instance();

  void Swap(ClientMessage* other);

  // implements Message ----------------------------------------------

  ClientMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientMessage& from);
  void MergeFrom(const ClientMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ClientMessage_Type Type;
  static const Type CONNECT = ClientMessage_Type_CONNECT;
  static const Type VIDEO = ClientMessage_Type_VIDEO;
  static const Type FRAME = ClientMessage_Type_FRAME;
  static const Type BATCH = ClientMessage_Type_BATCH;
  static const Type UPLINK_TEST = ClientMessage_Type_UPLINK_TEST;
  static const Type DISCONNECT = ClientMessage_Type_DISCONNECT;
  static inline bool Type_IsValid(int value) {
    return ClientMessage_Type_IsValid(value);
  }
  static const Type Type_MIN =
    ClientMessage_Type_Type_MIN;
  static const Type Type_MAX =
    ClientMessage_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    ClientMessage_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return ClientMessage_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return ClientMessage_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return ClientMessage_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .vatest_proto.ClientMessage.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::vatest_proto::ClientMessage_Type type() const;
  inline void set_type(::vatest_proto::ClientMessage_Type value);

  // optional string path = 2;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 2;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // repeated uint64 size = 3;
  inline int size_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 3;
  inline ::google::protobuf::uint64 size(int index) const;
  inline void set_size(int index, ::google::protobuf::uint64 value);
  inline void add_size(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      size() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_size();

  // optional uint32 batch = 4;
  inline bool has_batch() const;
  inline void clear_batch();
  static const int kBatchFieldNumber = 4;
  inline ::google::protobuf::uint32 batch() const;
  inline void set_batch(::google::protobuf::uint32 value);

  // optional uint32 top_k = 5;
  inline bool has_top_k() const;
  inline void clear_top_k();
  static const int kTopKFieldNumber = 5;
  inline ::google::protobuf::uint32 top_k() const;
  inline void set_top_k(::google::protobuf::uint32 value);

  // optional bool received_response = 6;
  inline bool has_received_response() const;
  inline void clear_received_response();
  static const int kReceivedResponseFieldNumber = 6;
  inline bool received_response() const;
  inline void set_received_response(bool value);

  // @@protoc_insertion_point(class_scope:vatest_proto.ClientMessage)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_path();
  inline void clear_has_path();
  inline void set_has_batch();
  inline void clear_has_batch();
  inline void set_has_top_k();
  inline void clear_has_top_k();
  inline void set_has_received_response();
  inline void clear_has_received_response();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* path_;
  int type_;
  ::google::protobuf::uint32 batch_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > size_;
  ::google::protobuf::uint32 top_k_;
  bool received_response_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_vatest_5fproto_2eproto();
  friend void protobuf_AssignDesc_vatest_5fproto_2eproto();
  friend void protobuf_ShutdownFile_vatest_5fproto_2eproto();

  void InitAsDefaultInstance();
  static ClientMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// ServerMessage

// required .vatest_proto.ServerMessage.Type type = 1;
inline bool ServerMessage::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerMessage::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerMessage::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerMessage::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::vatest_proto::ServerMessage_Type ServerMessage::type() const {
  return static_cast< ::vatest_proto::ServerMessage_Type >(type_);
}
inline void ServerMessage::set_type(::vatest_proto::ServerMessage_Type value) {
  assert(::vatest_proto::ServerMessage_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional string path = 2;
inline bool ServerMessage::has_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerMessage::set_has_path() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerMessage::clear_has_path() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerMessage::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& ServerMessage::path() const {
  return *path_;
}
inline void ServerMessage::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void ServerMessage::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void ServerMessage::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServerMessage::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* ServerMessage::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ServerMessage::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated uint32 tags = 3;
inline int ServerMessage::tags_size() const {
  return tags_.size();
}
inline void ServerMessage::clear_tags() {
  tags_.Clear();
}
inline ::google::protobuf::uint32 ServerMessage::tags(int index) const {
  return tags_.Get(index);
}
inline void ServerMessage::set_tags(int index, ::google::protobuf::uint32 value) {
  tags_.Set(index, value);
}
inline void ServerMessage::add_tags(::google::protobuf::uint32 value) {
  tags_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ServerMessage::tags() const {
  return tags_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ServerMessage::mutable_tags() {
  return &tags_;
}

// optional uint32 batch = 4;
inline bool ServerMessage::has_batch() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServerMessage::set_has_batch() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServerMessage::clear_has_batch() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServerMessage::clear_batch() {
  batch_ = 0u;
  clear_has_batch();
}
inline ::google::protobuf::uint32 ServerMessage::batch() const {
  return batch_;
}
inline void ServerMessage::set_batch(::google::protobuf::uint32 value) {
  set_has_batch();
  batch_ = value;
}

// repeated uint64 size = 5;
inline int ServerMessage::size_size() const {
  return size_.size();
}
inline void ServerMessage::clear_size() {
  size_.Clear();
}
inline ::google::protobuf::uint64 ServerMessage::size(int index) const {
  return size_.Get(index);
}
inline void ServerMessage::set_size(int index, ::google::protobuf::uint64 value) {
  size_.Set(index, value);
}
inline void ServerMessage::add_size(::google::protobuf::uint64 value) {
  size_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ServerMessage::size() const {
  return size_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ServerMessage::mutable_size() {
  return &size_;
}

// -------------------------------------------------------------------

// ClientMessage

// required .vatest_proto.ClientMessage.Type type = 1;
inline bool ClientMessage::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientMessage::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientMessage::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientMessage::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::vatest_proto::ClientMessage_Type ClientMessage::type() const {
  return static_cast< ::vatest_proto::ClientMessage_Type >(type_);
}
inline void ClientMessage::set_type(::vatest_proto::ClientMessage_Type value) {
  assert(::vatest_proto::ClientMessage_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional string path = 2;
inline bool ClientMessage::has_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientMessage::set_has_path() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientMessage::clear_has_path() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientMessage::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& ClientMessage::path() const {
  return *path_;
}
inline void ClientMessage::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void ClientMessage::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void ClientMessage::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClientMessage::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* ClientMessage::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ClientMessage::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated uint64 size = 3;
inline int ClientMessage::size_size() const {
  return size_.size();
}
inline void ClientMessage::clear_size() {
  size_.Clear();
}
inline ::google::protobuf::uint64 ClientMessage::size(int index) const {
  return size_.Get(index);
}
inline void ClientMessage::set_size(int index, ::google::protobuf::uint64 value) {
  size_.Set(index, value);
}
inline void ClientMessage::add_size(::google::protobuf::uint64 value) {
  size_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ClientMessage::size() const {
  return size_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ClientMessage::mutable_size() {
  return &size_;
}

// optional uint32 batch = 4;
inline bool ClientMessage::has_batch() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClientMessage::set_has_batch() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ClientMessage::clear_has_batch() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ClientMessage::clear_batch() {
  batch_ = 0u;
  clear_has_batch();
}
inline ::google::protobuf::uint32 ClientMessage::batch() const {
  return batch_;
}
inline void ClientMessage::set_batch(::google::protobuf::uint32 value) {
  set_has_batch();
  batch_ = value;
}

// optional uint32 top_k = 5;
inline bool ClientMessage::has_top_k() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ClientMessage::set_has_top_k() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ClientMessage::clear_has_top_k() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ClientMessage::clear_top_k() {
  top_k_ = 0u;
  clear_has_top_k();
}
inline ::google::protobuf::uint32 ClientMessage::top_k() const {
  return top_k_;
}
inline void ClientMessage::set_top_k(::google::protobuf::uint32 value) {
  set_has_top_k();
  top_k_ = value;
}

// optional bool received_response = 6;
inline bool ClientMessage::has_received_response() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ClientMessage::set_has_received_response() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ClientMessage::clear_has_received_response() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ClientMessage::clear_received_response() {
  received_response_ = false;
  clear_has_received_response();
}
inline bool ClientMessage::received_response() const {
  return received_response_;
}
inline void ClientMessage::set_received_response(bool value) {
  set_has_received_response();
  received_response_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vatest_proto

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vatest_proto::ServerMessage_Type>() {
  return ::vatest_proto::ServerMessage_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vatest_proto::ClientMessage_Type>() {
  return ::vatest_proto::ClientMessage_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_vatest_5fproto_2eproto__INCLUDED
